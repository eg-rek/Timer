```markdown
# Бот для управления событиями

Этот проект представляет собой Telegram-бот, интегрированный с веб-приложением на Flask, для управления и отображения событий. Бот позволяет администратору добавлять события через Telegram, которые сохраняются в базе данных SQLite. Веб-приложение Flask предоставляет интерфейс для просмотра этих событий, включая одно главное событие и несколько дополнительных.

## Возможности
- **Telegram-бот**: Администратор может добавлять события в формате `ЧЧ:ММ Название события` (например, `13:30 Начало трансляции`).
- **Главное событие**: Первое добавленное событие становится главным. Последующие события являются дополнительными, пока главное не будет заменено.
- **Веб-интерфейс**: Отображает главное событие и список дополнительных событий через API на базе Flask.
- **База данных SQLite**: Хранит данные о событиях.
- **Контроль доступа**: Только администратор (указанный в `ADMIN_ID`) может взаимодействовать с ботом.

## Требования
- Python 3.8+
- Аккаунт в Telegram и токен бота (получить можно через [BotFather](https://t.me/BotFather))
- ID администратора в Telegram (можно узнать через [UserInfoBot](https://t.me/userinfobot))

## Установка

1. **Клонируйте репозиторий**:
   ```bash
   git clone https://github.com/eg-rek/event-management-bot.git
   cd event-management-bot
   ```

2. **Создайте виртуальное окружение** (рекомендуется):
   ```bash
   python -m venv venv
   source venv/bin/activate  # Для Windows: venv\Scripts\activate
   ```

3. **Установите зависимости**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Настройте конфигурацию**:
   Отредактируйте файл `config.py`:
   - `TOKEN`: Токен вашего Telegram-бота.
   - `ADMIN_ID`: Ваш Telegram ID.
   - `HOST`: Хост для Flask-приложения (по умолчанию: `0.0.0.0` для внешнего доступа).
   - `PORT`: Порт для Flask-приложения (по умолчанию: `10000`).
   - `DATABASE`: Путь к базе данных SQLite (по умолчанию: `events.db`).

## Использование

1. **Запустите приложение**:
   ```bash
   python app.py
   ```

2. **Взаимодействуйте с ботом**:
   - Запустите бота, отправив команду `/start` в Telegram (только для администратора).
   - Добавьте событие, отправив сообщение в формате `ЧЧ:ММ Название события` (например, `13:30 Начало трансляции`).
   - Бот подтвердит, добавлено ли событие как главное или дополнительное.

3. **Просмотр событий**:
   - Откройте браузер и перейдите по адресу `http://<HOST>:<PORT>/` для просмотра веб-интерфейса.
   - Эндпоинт API `http://<HOST>:<PORT>/api/events` возвращает данные о событиях в формате JSON.

## Структура проекта
```
├── app.py              # Основное приложение (Flask и Telegram-бот)
├── config.py           # Настройки конфигурации
├── requirements.txt    # Зависимости Python
├── templates/
│   └── index.html      # Шаблон веб-интерфейса
└── events.db           # База данных SQLite (создаётся при первом запуске)
```

## Эндпоинты API
- `GET /`: Отображает веб-интерфейс (`index.html`).
- `GET /api/events`: Возвращает JSON-объект с:
  - `mainEvent`: Главное событие (название и время) или значение по умолчанию, если событий нет.
  - `secondaryEvents`: Список дополнительных событий (название и время).

## Примечания
- Бот использует библиотеку `aiogram` для интеграции с Telegram и `flask` для веб-сервера.
- База данных SQLite инициализируется автоматически при первом запуске.
- Бот работает в отдельном потоке, чтобы не блокировать сервер Flask.
- Убедитесь, что `HOST` и `PORT` доступны при внешнем развертывании (например, настройте брандмауэр или проброс портов).

## Устранение неполадок
- **Бот не отвечает**: Проверьте `TOKEN` и `ADMIN_ID` в `config.py`. Убедитесь, что бот не заблокирован в Telegram.
- **Веб-интерфейс не загружается**: Убедитесь, что сервер Flask запущен и `HOST`/`PORT` указаны верно.
- **Ошибки базы данных**: Проверьте, доступна ли директория для записи `events.db`.

## Вклад в проект
Приветствуются любые вопросы или запросы на включение изменений на [GitHub](https://github.com/eg-rek).

## Автор
- **Eg_Rek**
- Telegram: [t.me/eg_rek](https://t.me/eg_rek)
- GitHub: [github.com/eg-rek](https://github.com/eg-rek)

## Лицензия
Проект распространяется под лицензией MIT.
